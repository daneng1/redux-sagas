{"version":3,"sources":["app/components/PageWrapper/index.ts","styles/StyleConstants.ts","serviceWorker.ts","styles/global-styles.ts","utils/loadable.tsx","app/components/LoadingIndicator/index.tsx","app/containers/HomePage/Loadable.tsx","app/containers/NotFoundPage/Loadable.tsx","utils/redux-injectors.ts","utils/request.ts","app/containers/Countries/actions.tsx","app/containers/Countries/saga.ts","app/containers/Countries/reducer.tsx","app/containers/Countries/selectors.ts","app/containers/Countries/index.tsx","app/containers/CountryDetail/actions.tsx","app/containers/CountryDetail/saga.ts","app/containers/CountryDetail/reducer.tsx","app/containers/CountryDetail/selectors.ts","app/containers/CountryDetail/index.tsx","app/index.tsx","store/reducers.ts","styles/theme/themes.ts","styles/theme/utils.ts","styles/theme/slice.ts","styles/theme/ThemeProvider.tsx","locales/translations.ts","locales/i18n.ts","index.tsx","store/configureStore.ts","app/components/Link/index.ts"],"names":["PageWrapper","styled","div","StyleConstants","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","NAV_BAR_HEIGHT","p","theme","background","lazyLoad","importFunc","selectorFunc","opts","fallback","lazyFactory","then","module","default","LazyComponent","lazy","props","LoadingIndicator","Svg","viewBox","small","Circle","cx","cy","r","fill","strokeWidth","rotate","keyframes","dash","svg","speed","circle","primary","LoadingWrapper","HomePage","NotFoundPage","useInjectReducer","params","useReducer","useInjectSaga","useSaga","ResponseError","response","statusText","Error","parseJSON","status","json","checkStatus","error","request","url","options","a","fetch","fetchResponse","actions","fetchCountries","createAction","fetchCountriesSuccess","countries","payload","fetchCountriesError","saga","call","length","put","toString","takeLatest","type","key","initialState","undefined","isLoading","countriesReducer","createReducer","FETCH_COUNTRIES_REQUEST","state","action","FETCH_COUNTRIES_SUCCESS","FETCH_COUNTRIES_ERROR","selectDomain","selectLoading","createSelector","countriesState","selectError","selectCountries","Countries","reducer","useSelector","dispatch","useDispatch","useEffect","List","map","country","Country","id","Link","to","name","ErrorText","li","span","text","fetchCountryDetail","fetchCountryDetailSuccess","countryDetail","fetchCountryDetailError","requestURL","data","currency_code","countryDetailReducer","FETCH_COUNTRY_DETAIL_REQUEST","FETCH_COUNTRY_DETAIL_SUCCESS","FETCH_COUNTRY_DETAIL_ERROR","countryDetailState","selectCountryDetail","CountryDetail","App","i18n","useTranslation","titleTemplate","defaultTitle","htmlAttributes","lang","language","exact","path","component","injectedReducers","Object","keys","combineReducers","lightTheme","textSecondary","backgroundVariant","border","borderLight","themes","light","dark","isSystemDark","matchMedia","matches","selected","localStorage","getItem","themeSlice","createSlice","reducers","changeTheme","selectTheme","themeSliceKey","ThemeProvider","React","only","children","translations","translationsJson","en","translation","de","convertLanguageJsonToObject","objToConvertTo","current","forEach","currentLookupKey","i18next","use","initReactI18next","LanguageDetector","init","resources","fallbackLng","debug","process","interpolation","escapeValue","FontFaceObserver","load","document","body","classList","add","store","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","enhancers","createInjectorsEnhancer","configureStore","middleware","getDefaultMiddleware","devTools","configureAppStore","MOUNT_NODE","getElementById","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","console","message","RouterLink"],"mappings":"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","file":"static/js/main.5bb620f8.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\nexport const PageWrapper = styled.div`\n  width: 960px;\n  margin: 0 auto;\n  padding: 0 1.5rem;\n  box-sizing: content-box;\n`;\n","export enum StyleConstants {\n  NAV_BAR_HEIGHT = '4rem',\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\nimport { StyleConstants } from './StyleConstants';\n/* istanbul ignore next */\nexport const GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    height: 100%;\n    width: 100%;\n    line-height: 1.5;\n  }\n\n  body {\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    padding-top: ${StyleConstants.NAV_BAR_HEIGHT};\n    background-color: ${p => p.theme.background};\n  }\n\n  body.fontLoaded {\n    font-family: 'Inter', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n  \n  p,\n  label {\n    line-height: 1.5em;\n  }\n\n  input, select, button {\n    font-family: inherit;\n    font-size: inherit;\n  }\n\n  .icon {\n    width: 1.5rem;\n    height: 1.5rem;\n  }\n`;\n","import React, { lazy, Suspense } from 'react';\n\ninterface Opts {\n  fallback: React.ReactNode;\n}\ntype Unpromisify<T> = T extends Promise<infer P> ? P : never;\n\nexport const lazyLoad = <\n  T extends Promise<any>,\n  U extends React.ComponentType<any>\n>(\n  importFunc: () => T,\n  selectorFunc?: (s: Unpromisify<T>) => U,\n  opts: Opts = { fallback: null },\n) => {\n  let lazyFactory: () => Promise<{ default: U }> = importFunc;\n\n  if (selectorFunc) {\n    lazyFactory = () =>\n      importFunc().then(module => ({ default: selectorFunc(module) }));\n  }\n\n  const LazyComponent = lazy(lazyFactory);\n\n  return (props: React.ComponentProps<U>): JSX.Element => (\n    <Suspense fallback={opts.fallback!}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n","import * as React from 'react';\nimport styled, { keyframes } from 'styled-components/macro';\n\ninterface Props extends SvgProps {}\n\nexport const LoadingIndicator = (props: Props) => (\n  <Svg viewBox=\"-24 -24 48 48\" small={props.small}>\n    <Circle cx=\"0\" cy=\"0\" r=\"20\" fill=\"none\" strokeWidth=\"4\"></Circle>\n  </Svg>\n);\n\nconst speed = 1.5;\n\nconst rotate = keyframes`\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst dash = keyframes`\n  0% {\n    stroke-dasharray: 0, 150;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 100, 150;\n    stroke-dashoffset: -24;\n  }\n  100% {\n    stroke-dasharray: 0, 150;\n    stroke-dashoffset: -124;\n  }\n`;\n\ninterface SvgProps {\n  small?: boolean;\n}\n\nconst Svg = styled.svg<SvgProps>`\n  animation: ${rotate} ${speed * 1.75}s linear infinite;\n  height: ${p => (p.small ? '1.25rem' : '3rem')};\n  width: ${p => (p.small ? '1.25rem' : '3rem')};\n  transform-origin: center;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  z-index: 2;\n`;\n\nconst Circle = styled.circle`\n  animation: ${dash} ${speed}s ease-in-out infinite;\n  stroke: ${p => p.theme.primary};\n  stroke-linecap: round;\n`;\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport * as React from 'react';\nimport { lazyLoad } from 'utils/loadable';\nimport { LoadingIndicator } from 'app/components/LoadingIndicator';\nimport styled from 'styled-components/macro';\n\nconst LoadingWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const HomePage = lazyLoad(\n  () => import('./index'),\n  module => module.HomePage,\n  {\n    fallback: (\n      <LoadingWrapper>\n        <LoadingIndicator />\n      </LoadingWrapper>\n    ),\n  },\n);\n","/**\n * Asynchronously loads the component for NotFoundPage\n */\n\nimport * as React from 'react';\nimport { lazyLoad } from 'utils/loadable';\nimport { LoadingIndicator } from 'app/components/LoadingIndicator';\n\nexport const NotFoundPage = lazyLoad(\n  () => import('./index'),\n  module => module.NotFoundPage,\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","import {\n  useInjectReducer as useReducer,\n  useInjectSaga as useSaga,\n} from 'redux-injectors';\nimport {\n  InjectReducerParams,\n  InjectSagaParams,\n  RootStateKeyType,\n} from './types/injector-typings';\n\n/* Wrap redux-injectors with stricter types */\n\nexport function useInjectReducer<Key extends RootStateKeyType>(\n  params: InjectReducerParams<Key>,\n) {\n  return useReducer(params);\n}\n\nexport function useInjectSaga(params: InjectSagaParams) {\n  return useSaga(params);\n}\n","export class ResponseError extends Error {\n  public response: Response;\n\n  constructor(response: Response) {\n    super(response.statusText);\n    this.response = response;\n  }\n}\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response: Response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new ResponseError(response);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport async function request(\n  url: string,\n  options?: RequestInit,\n): Promise<{} | { err: ResponseError }> {\n  const fetchResponse = await fetch(url, options);\n  const response = checkStatus(fetchResponse);\n  return parseJSON(response);\n}\n","import { createAction } from '@reduxjs/toolkit';\n\nconst fetchCountries = createAction('FETCH_COUNTRIES_REQUEST');\n\nconst fetchCountriesSuccess = createAction(\n  'FETCH_COUNTRIES_SUCCESS',\n  countries => {\n    return {\n      payload: {\n        countries,\n      },\n    };\n  },\n);\n\nconst fetchCountriesError = createAction('FETCH_COUNTRIES_ERROR', error => {\n  return {\n    payload: {\n      error,\n    },\n  };\n});\n\nexport const actions = {\n  fetchCountries,\n  fetchCountriesSuccess,\n  fetchCountriesError,\n};\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { request } from 'utils/request';\nimport { actions } from './actions';\n\nexport function* fetchCountries() {\n  const requestURL = `https://api.carerev.com/api/v1/countries`;\n\n  try {\n    const { countries } = yield call(request, requestURL);\n\n    if (countries?.length > 0) {\n      yield put(actions.fetchCountriesSuccess(countries));\n    } else {\n      yield put(actions.fetchCountriesError('No countries found.'));\n    }\n  } catch (err) {\n    yield put(actions.fetchCountriesError(err.toString()));\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport function* saga() {\n  yield takeLatest(actions.fetchCountries.type, fetchCountries);\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport { CountriesState } from './types';\n\nexport const key = 'countries';\n\nexport const initialState: CountriesState = {\n  countries: [],\n  error: undefined,\n  isLoading: false,\n};\n\nexport const countriesReducer = createReducer(initialState, {\n  FETCH_COUNTRIES_REQUEST: (state, action) => {\n    state.isLoading = true;\n  },\n  FETCH_COUNTRIES_SUCCESS: (state, action) => {\n    state.isLoading = false;\n    state.countries = action.payload.countries;\n  },\n  FETCH_COUNTRIES_ERROR: (state, action) => {\n    state.isLoading = false;\n    state.error = action.payload.error;\n  },\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { RootState } from 'types';\nimport { initialState } from './reducer';\n\n// First select the relevant part from the state\nconst selectDomain = (state: RootState) => state.countries || initialState;\n\nexport const selectLoading = createSelector(\n  [selectDomain],\n  countriesState => countriesState.isLoading,\n);\n\nexport const selectError = createSelector(\n  [selectDomain],\n  countriesState => countriesState.error,\n);\n\nexport const selectCountries = createSelector(\n  [selectDomain],\n  countriesState => countriesState.countries,\n);\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components/macro';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { saga } from './saga';\nimport { key, countriesReducer } from './reducer';\nimport { actions } from './actions';\nimport { selectCountries, selectLoading, selectError } from './selectors';\nimport { LoadingIndicator } from 'app/components/LoadingIndicator';\nimport { Link } from 'app/components/Link';\nimport { PageWrapper } from 'app/components/PageWrapper';\n\nexport function Countries() {\n  useInjectReducer({ key: key, reducer: countriesReducer });\n  useInjectSaga({ key: key, saga });\n\n  const countries = useSelector(selectCountries);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(actions.fetchCountries());\n  }, [dispatch]);\n\n  return (\n    <PageWrapper>\n      <h1>Countries</h1>\n      {isLoading && <LoadingIndicator small />}\n      {countries?.length > 0 ? (\n        <List>\n          {countries.map(country => (\n            <Country key={country.id}>\n              <Link to={`/country/${country.id}`}>{country.name}</Link>\n            </Country>\n          ))}\n        </List>\n      ) : error ? (\n        <ErrorText>{error}</ErrorText>\n      ) : null}\n    </PageWrapper>\n  );\n}\n\nconst Country = styled.li`\n  color: blue;\n`;\n\nconst ErrorText = styled.span`\n  color: ${p => p.theme.text};\n`;\n\nconst List = styled.div``;\n","import { createAction } from '@reduxjs/toolkit';\n\nconst fetchCountryDetail = createAction('FETCH_COUNTRY_DETAIL_REQUEST',\n  id => {\n    return {\n      payload: {\n        id,\n      },\n    };\n  },\n);\n\nconst fetchCountryDetailSuccess = createAction(\n  'FETCH_COUNTRY_DETAIL_SUCCESS',\n  countryDetail => {\n    return {\n      payload: {\n        countryDetail,\n      },\n    };\n  },\n);\n\nconst fetchCountryDetailError = createAction('FETCH_COUNTRY_DETAIL_ERROR', error => {\n  return {\n    payload: {\n      error,\n    },\n  };\n});\n\nexport const actions = {\n  fetchCountryDetail,\n  fetchCountryDetailSuccess,\n  fetchCountryDetailError,\n};\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { request } from 'utils/request';\nimport { actions } from './actions';\n\nexport function* fetchCountryDetail(action: any) {\n\n  //Add id dynamically through Action payload\n  const id = action.payload.id;\n  const requestURL = `https://api.carerev.com/api/v1/countries/${id}`;\n\n  try {\n    const data = yield call(request, requestURL);\n\n    if (data) {\n      yield put(actions.fetchCountryDetailSuccess(data));\n    } else {\n      yield put(actions.fetchCountryDetailError('No country details found.'));\n    }\n  } catch (err) {\n    yield put(actions.fetchCountryDetailError(err.toString()));\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport function* saga() {\n  yield takeLatest(actions.fetchCountryDetail.type, fetchCountryDetail);\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport { CountryDetailState } from './types';\n\nexport const key = 'countryDetail';\n\nexport const initialState: CountryDetailState = {\n    // I had to specify the properties of countryDetails here, otherwise the properties were missing from type Country\n  countryDetail: { name: '', currency_code: '', id: '' },\n  error: undefined,\n  isLoading: false,\n};\n\nexport const countryDetailReducer = createReducer(initialState, {\n  FETCH_COUNTRY_DETAIL_REQUEST: (state, action) => {\n    state.isLoading = true;\n  },\n  FETCH_COUNTRY_DETAIL_SUCCESS: (state, action) => {\n    state.isLoading = false;\n    state.countryDetail = action.payload.countryDetail;\n  },\n  FETCH_COUNTRY_DETAIL_ERROR: (state, action) => {\n    state.isLoading = false;\n    state.error = action.payload.error;\n  },\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport { CountryDetailState } from './types';\nimport { RootState } from 'types';\nimport { initialState } from './reducer';\n\n// First select the relevant part from the state\nconst selectDomain = (state: RootState) => state.countryDetail || initialState;\n\nexport const selectLoading = createSelector(\n  [selectDomain],\n  countryDetailState => countryDetailState.isLoading,\n);\n\nexport const selectError = createSelector(\n  [selectDomain],\n  countryDetailState => countryDetailState.error,\n);\n\nexport const selectCountryDetail = createSelector(\n  [selectDomain],\n  (countryDetailState: CountryDetailState) => countryDetailState.countryDetail,\n);\n","import React, { useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\n\nimport styled from 'styled-components/macro';\n\nimport { saga } from './saga';\nimport { key, countryDetailReducer } from './reducer';\nimport { actions } from './actions';\nimport { selectCountryDetail, selectLoading, selectError } from './selectors';\n\nimport { LoadingIndicator } from 'app/components/LoadingIndicator';\nimport { Link } from 'app/components/Link';\nimport { PageWrapper } from 'app/components/PageWrapper';\n\n// Used RouteComponentProps to pass the country ID from the Country component into the fetchCountryDetail action\ntype MatchParams = {\n  id: string\n}\n\nexport function CountryDetail(props: RouteComponentProps<MatchParams>) {\n  const id = props.match.params.id;\n\n  useInjectReducer({ key: key, reducer: countryDetailReducer });\n  useInjectSaga({ key: key, saga });\n\n  const countryDetail = useSelector(selectCountryDetail);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(actions.fetchCountryDetail(id));\n  }, [dispatch, id]);\n\n  return (\n    <PageWrapper>\n      <h1>Country Details</h1>\n      {isLoading && <LoadingIndicator small />}\n      {countryDetail ? (\n        <>\n        <List>\n          <p>COUNTRY: {countryDetail.name}</p>\n          <p>CURRENCY CODE: {countryDetail.currency_code}</p>\n        </List>\n        <div>\n          <Link to={`/countries/`}>Countries List</Link>\n        </div>\n        <div>\n          <Link to={`/`}>Home</Link>\n        </div>\n        </>\n      ) : error ? (\n        <ErrorText>{error}</ErrorText>\n      ) : null}\n    </PageWrapper>\n  );\n}\n\n\nconst ErrorText = styled.span`\n  color: ${p => p.theme.text};\n`;\n\nconst List = styled.div``;\n","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport * as React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\n\nimport { GlobalStyle } from \"../styles/global-styles\";\n\nimport { HomePage } from \"./containers/HomePage/Loadable\";\nimport { NotFoundPage } from \"./containers/NotFoundPage/Loadable\";\nimport { Countries } from \"./containers/Countries\";\nimport { CountryDetail } from \"./containers/CountryDetail\";\nimport { useTranslation } from \"react-i18next\";\n\nexport function App() {\n  const { i18n } = useTranslation();\n  return (\n    <BrowserRouter>\n      <Helmet\n        titleTemplate=\"%s - CareRev Sample App\"\n        defaultTitle=\"CareRev Sample App\"\n        htmlAttributes={{ lang: i18n.language }}\n      ></Helmet>\n\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + \"/\"} component={HomePage} />\n        <Route\n          exact\n          path={process.env.PUBLIC_URL + \"/countries\"}\n          component={Countries}\n        />\n        <Route\n          exact\n          path={process.env.PUBLIC_URL + \"/country/:id\"}\n          component={CountryDetail}\n        />\n        <Route component={NotFoundPage} />\n      </Switch>\n      <GlobalStyle />\n    </BrowserRouter>\n  );\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from '@reduxjs/toolkit';\n\nimport { InjectedReducersType } from 'utils/types/injector-typings';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport function createReducer(injectedReducers: InjectedReducersType = {}) {\n  // Initially we don't have any injectedReducers, so returning identity function to avoid the error\n  if (Object.keys(injectedReducers).length === 0) {\n    return state => state;\n  } else {\n    return combineReducers({\n      ...injectedReducers,\n    });\n  }\n}\n","const lightTheme = {\n  primary: 'rgba(215,113,88,1)',\n  text: 'rgba(58,52,51,1)',\n  textSecondary: 'rgba(58,52,51,0.7)',\n  background: 'rgba(255,255,255,1)',\n  backgroundVariant: 'rgba(251,249,249,1)',\n  border: 'rgba(58,52,51,0.12)',\n  borderLight: 'rgba(58,52,51,0.05)',\n};\n\nexport type Theme = typeof lightTheme;\n\nexport const themes = {\n  light: lightTheme,\n  dark: lightTheme,\n};\n","import { ThemeKeyType } from './types';\n\n/* istanbul ignore next line */\nexport const isSystemDark = window?.matchMedia\n  ? window.matchMedia('(prefers-color-scheme: dark)')?.matches\n  : undefined;\n\nexport function saveTheme(theme: ThemeKeyType) {\n  window.localStorage && localStorage.setItem('selectedTheme', theme);\n}\n\n/* istanbul ignore next line */\nexport function getThemeFromStorage(): ThemeKeyType | null {\n  return window.localStorage\n    ? (localStorage.getItem('selectedTheme') as ThemeKeyType) || null\n    : null;\n}\n","import { PayloadAction, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { ThemeState, ThemeKeyType } from './types';\nimport { themes } from './themes';\nimport { getThemeFromStorage, isSystemDark } from './utils';\nimport { RootState } from 'types';\n\nexport const initialState: ThemeState = {\n  selected: getThemeFromStorage() || 'system',\n};\n\nconst themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    changeTheme(state, action: PayloadAction<ThemeKeyType>) {\n      state.selected = action.payload;\n    },\n  },\n});\n\nexport const selectTheme = createSelector(\n  [(state: RootState) => state.theme || initialState],\n  theme => {\n    if (theme.selected === 'system') {\n      return isSystemDark ? themes.dark : themes.light;\n    }\n    return themes[theme.selected];\n  },\n);\n\nexport const selectThemeKey = createSelector(\n  [(state: RootState) => state.theme || initialState],\n  theme => theme.selected,\n);\n\nexport const { changeTheme } = themeSlice.actions;\nexport const reducer = themeSlice.reducer;\nexport const themeSliceKey = themeSlice.name;\n","import * as React from 'react';\nimport { ThemeProvider as OriginalThemeProvider } from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { selectTheme, themeSliceKey, reducer } from './slice';\nimport { useInjectReducer } from 'redux-injectors';\n\nexport const ThemeProvider = (props: { children: React.ReactChild }) => {\n  useInjectReducer({ key: themeSliceKey, reducer: reducer });\n\n  const theme = useSelector(selectTheme);\n  return (\n    <OriginalThemeProvider theme={theme}>\n      {React.Children.only(props.children)}\n    </OriginalThemeProvider>\n  );\n};\n","import { ConvertedToObjectType, TranslationJsonType } from './types';\n\n/**\n * This file is seperate from the './i18n.ts' simply to make the Hot Module Replacement work seamlessly.\n * Your components can import this file in 'messages.ts' files which would ruin the HMR if this isn't a separate module\n */\nexport const translations: ConvertedToObjectType<TranslationJsonType> = {} as any;\n\n/*\n * Converts the static JSON file into an object where keys are identical\n * but values are strings concatenated according to syntax.\n * This is helpful when using the JSON file keys and still having the intellisense support\n * along with type-safety\n */\nexport const convertLanguageJsonToObject = (\n  json: any,\n  objToConvertTo = translations,\n  current?: string,\n) => {\n  Object.keys(json).forEach(key => {\n    const currentLookupKey = current ? `${current}.${key}` : key;\n    if (typeof json[key] === 'object') {\n      objToConvertTo[key] = {};\n      convertLanguageJsonToObject(\n        json[key],\n        objToConvertTo[key],\n        currentLookupKey,\n      );\n    } else {\n      objToConvertTo[key] = currentLookupKey;\n    }\n  });\n};\n","import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en from './en/translation.json';\nimport de from './de/translation.json';\nimport { convertLanguageJsonToObject } from './translations';\n\nexport const translationsJson = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n\n// Create the 'translations' object to provide full intellisense support for the static json files.\nconvertLanguageJsonToObject(en);\n\nexport const i18n = i18next\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources: translationsJson,\n    fallbackLng: 'en',\n    debug:\n      process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test',\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n","/**\n * index.tsx\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport FontFaceObserver from 'fontfaceobserver';\nimport * as serviceWorker from 'serviceWorker';\n\n// Use consistent styling\nimport 'sanitize.css/sanitize.css';\n\nimport { App } from 'app';\n\nimport { HelmetProvider } from 'react-helmet-async';\n\nimport { configureAppStore } from 'store/configureStore';\n\nimport { ThemeProvider } from 'styles/theme/ThemeProvider';\n\n// Initialize languages\nimport './locales/i18n';\n\n// Observe loading of Inter (to remove 'Inter', remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver('Inter', {});\n\n// When Inter is loaded, add a font-family using Inter to the body\nopenSansObserver.load().then(() => {\n  document.body.classList.add('fontLoaded');\n});\n\nconst store = configureAppStore();\nconst MOUNT_NODE = document.getElementById('root') as HTMLElement;\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider>\n      <HelmetProvider>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </HelmetProvider>\n    </ThemeProvider>\n  </Provider>,\n  MOUNT_NODE,\n);\n\n// Hot reloadable translation json files\nif (module.hot) {\n  module.hot.accept(['./locales/i18n'], () => {\n    // No need to render the App again because i18next works with the hooks\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { createInjectorsEnhancer } from 'redux-injectors';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { createReducer } from './reducers';\n\nexport function configureAppStore() {\n  const reduxSagaMonitorOptions = {};\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const { run: runSaga } = sagaMiddleware;\n\n  // Create the store with saga middleware\n  const middlewares = [sagaMiddleware];\n\n  const enhancers = [\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ];\n\n  const store = configureStore({\n    reducer: createReducer(),\n    middleware: [...getDefaultMiddleware(), ...middlewares],\n    devTools:\n      /* istanbul ignore next line */\n      process.env.NODE_ENV !== 'production' ||\n      process.env.PUBLIC_URL.length > 0,\n    enhancers,\n  });\n\n  return store;\n}\n","import styled from 'styled-components/macro';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport const Link = styled(RouterLink)`\n  color: ${p => p.theme.primary};\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n    opacity: 0.8;\n  }\n\n  &:active {\n    opacity: 0.4;\n  }\n`;\n"],"sourceRoot":""}